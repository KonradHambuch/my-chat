{"version":3,"sources":["Proxy.ts","TextInput.tsx","Login.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","send","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","stringify","listeners","listener","obj","splice","findIndex","args","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","TextInputAndButton","textInput","React","createRef","onClick","current","ref","buttonContent","Login","email","password","displayName","register","onMyNeptunGiven","givenEmail","toLowerCase","src","width","href","preventDefault","sendPacket","staySignedIn","ConversationCard","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleDateString","content","m","forceUpdate","removeAllEventListener","LeftPane","user","tag","text","sendContactRequest","map","key","selectedConversation","firstMessage","c","MessageCard","own","toLocaleTimeString","PureComponent","RightPane","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","signedIn","login","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.71dda965.chunk.js","sourcesContent":["import { OutgoingPacket, InboxDto, IncomingPacket, MessageDto } from \"./chat\";\r\n\r\n\r\nexport class EventProducer<M>\r\n{\r\n    private listeners: { type: keyof M, listener, obj?: Object }[] = [];\r\n    addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object) {\r\n        this.listeners.push({ type, listener, obj });\r\n    }\r\n    removeEventListener<K extends keyof M>(type: K, listener: M[K]) {\r\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\r\n    }\r\n    protected dispatch<K extends keyof M>(type: K, ...args) {\r\n        for (let listener of this.listeners.filter(x => x.type === type))\r\n            listener.listener.call(listener.obj, ...args);\r\n    }\r\n    removeAllEventListener(obj: Object) {\r\n        if (!obj)\r\n            throw new Error(\"Must specify object\");\r\n        this.listeners = this.listeners.filter(x => x.obj !== obj);\r\n    }\r\n}\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap>\r\n{\r\n    private ws: WebSocket;\r\n    inbox: InboxDto | null = null;\r\n    constructor() {\r\n        super();\r\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat/\");\r\n        this.ws.addEventListener(\"open\", () => {\r\n            this.ws.send(\"Hello\");\r\n        });\r\n        this.ws.addEventListener(\"message\", e => {\r\n            let p = <IncomingPacket>JSON.parse(e.data);\r\n            switch (p.type) {\r\n                case \"error\":\r\n                    alert(p.message);\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch(\"login\");\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\r\n                    this.dispatch(\"message\", cid, p.message);\r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push(p.conversation);\r\n                    this.dispatch(\"conversation\", p.conversation.channelId);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    public sendPacket(packet: OutgoingPacket) {\r\n        this.ws.send(JSON.stringify(packet));\r\n    }\r\n}\r\n\r\ninterface ProxyEventMap {\r\n    \"login\": () => void;\r\n    \"message\": (channelId: string, message: MessageDto) => void;\r\n    \"conversation\": (channelId: string) => void;\r\n}\r\n\r\nexport var proxy = new Proxy();\r\n","import { Component } from \"react\";\r\nimport './TextInput.css';\r\nimport React from \"react\";\r\n\r\nexport interface TextInputOptions {\r\n    value?: string;\r\n    onChange?: (value: string) => void;\r\n    type?: \"text\" | \"password\" | \"email\";\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n};\r\nexport class TextInput extends Component<TextInputOptions>\r\n{\r\n    state = { value: this.props.value, focus: false };\r\n    render() {\r\n        let attrs = {} as any;\r\n        if (this.props.autofocus)\r\n            attrs.autoFocus = true;\r\n        if (this.props.onEnter) {\r\n            attrs.onKeyDown = e => {\r\n                if (e.keyCode === 13)\r\n                    this.props.onEnter!();\r\n            };\r\n        }\r\n        return (\r\n            <div className=\"text-input\">\r\n                <input type={this.props.type ?? \"text\"} value={this.state.value}\r\n                    onChange={e => {\r\n                        this.setState({ value: e.target.value });\r\n                        this.props.onChange?.(e.target.value);\r\n                    }}\r\n                    onBlur={() => this.setState({ focus: false })}\r\n                    onFocus={() => this.setState({ focus: true })}\r\n                    {...attrs}\r\n                />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\r\n                    {this.props.placeholder}\r\n                </label>\r\n            </div>);\r\n    }\r\n}\r\nexport interface TextInputAndButtonOptions extends TextInputOptions {\r\n    buttonContent?: string;\r\n    onClick?: (text: string) => boolean | void;\r\n}\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    textInput = React.createRef<TextInput>();\r\n    onClick() {\r\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\"))\r\n            this.textInput.current?.setState({ value: \"\" });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput {...this.props} ref={this.textInput} onEnter={() => this.onClick()} />\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.props.buttonContent}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { proxy } from '../src/Proxy';\r\nimport { TextInput } from './TextInput';\r\nexport class Login extends Component {\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n    render() {\r\n        return (\r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" />\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={this.state.email}\r\n                    onChange={e => {\r\n                        this.setState({ email: e });\r\n                        this.onMyNeptunGiven(e);\r\n                    }}\r\n                    onEnter={() => this.onClick()} autofocus={true} />\r\n                {this.state.register &&\r\n                    <input type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={this.state.displayName}\r\n                        onChange={e => this.setState({ displayName: e.target.value })} />}\r\n                <TextInput type=\"password\" placeholder=\"Password\" value={this.state.password} onChange={e => this.setState({ password: e })}\r\n                    onEnter={() => this.onClick()} />\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.state.register ? \"Register\" : \"Login\"}\r\n                </button>\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\r\n                    <a href=\"\" onClick={e => { e.preventDefault(); this.setState({ register: !this.state.register }); }}>\r\n                        {this.state.register ? \"Login\" : \"Register\"}\r\n                    </a>\r\n                </p>\r\n            </div>);\r\n    }\r\n    onClick() {\r\n        if (this.state.register)\r\n            proxy.sendPacket({ type: \"register\", email: this.state.email, password: this.state.password, displayName: this.state.displayName, staySignedIn: false });\r\n        else\r\n            proxy.sendPacket({ type: \"login\", email: this.state.email, password: this.state.password, staySignedIn: false });\r\n    }\r\n    onMyNeptunGiven = (givenEmail: string) => {\r\n        if (givenEmail.toLowerCase() == \"nz7png\") {\r\n            this.setState({displayName: \"Konrád\"});\r\n        }\r\n    }\r\n}","import { Component } from \"react\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport { proxy } from \"./Proxy\";\r\nimport React from \"react\";\r\n\r\nexport class ConversationCard extends Component<{\r\n    conversation: ConversationDto,\r\n    selected: boolean,\r\n    onSelect: () => void\r\n}>\r\n{\r\n    render() {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\r\n            this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\r\n        return (\r\n            <div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")}\r\n                onClick={() => this.props.onSelect()}>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\r\n                    <span className=\"time\">\r\n                        {lastMessage && new Date(lastMessage.timeStamp).toLocaleDateString()}\r\n                    </span>\r\n                </div>\r\n                <span className=\"last-message\">{lastMessage?.content}</span>\r\n            </div>\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n}","import { proxy } from './Proxy';\r\nimport { Component } from 'react';\r\nimport { InboxDto, ConversationDto } from './chat';\r\nimport { TextInputAndButton } from './TextInput';\r\nimport { ConversationCard } from './ConversationCard';\r\nimport React from 'react';\r\nexport class LeftPane extends Component<{\r\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\r\n    onSelect: (c: ConversationDto) => void\r\n}>\r\n{\r\n    render() {\r\n        return (\r\n            <div className=\"left-pane\">\r\n                <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p>\r\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\r\n                    buttonContent=\"Inv\"\r\n                    onClick={text => this.sendContactRequest(text)} />\r\n                <div className=\"conversations\">\r\n                    {this.props.inbox.conversations.map(x =>\r\n                        <ConversationCard\r\n                            key={x.channelId}\r\n                            conversation={x}\r\n                            selected={x === this.props.selectedConversation}\r\n                            onSelect={() => this.props.onSelect(x)} />)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    sendContactRequest(email: string) {\r\n        proxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"Hello\" });\r\n        return true;\r\n    }\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\r\n    }\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n}","import { PureComponent } from \"react\";\r\nimport { MessageDto } from \"./chat\";\r\nimport React from \"react\";\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\r\n{\r\n    render() {\r\n        return (\r\n            <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{this.props.message.content}</span>\r\n                    <span className=\"time\">\r\n                        {new Date(this.props.message.timeStamp).toLocaleTimeString()}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import { Component } from \"react\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport { proxy } from \"./Proxy\";\r\nimport { TextInputAndButton } from \"./TextInput\";\r\nimport { MessageCard } from \"./MessageCard\";\r\nimport React from \"react\";\r\n\r\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\r\n{\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation?.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n    onSend(text: string) {\r\n        proxy.sendPacket({ type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0, contentType: 0, content: \"N: \" + text });\r\n        return true;\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"right-pane column\">\r\n                {this.props.conversation &&\r\n                    <>\r\n                        <div className=\"conversation-header row\">\r\n                            <button type=\"button\" className=\"only-narrow\"\r\n                                onClick={() => this.props.onBack()}>Back</button>\r\n                            <p>{this.props.conversation?.name}</p>\r\n                        </div>\r\n                        <div className=\"messages\">\r\n                            {this.props.conversation?.lastMessages.map(x =>\r\n                                <MessageCard key={x.id} message={x}\r\n                                    own={x.senderId === proxy.inbox?.user.id} />)}\r\n                        </div>\r\n                        <div className=\"send-message row\">\r\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\r\n                                buttonContent=\"Send\" onClick={x => this.onSend(x)} />\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import { Component } from \"react\";\r\nimport { ConversationDto } from \"./chat\";\r\nimport { LeftPane } from \"./LeftPane\";\r\nimport { proxy } from \"./Proxy\";\r\nimport { RightPane } from \"./RightPane\";\r\nimport React from \"react\";\r\n\r\nexport class Main extends Component {\r\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\r\n    render() {\r\n        let className = \"main row \" + (this.state.selectedConversation ? \"right\" : \"left\");\r\n        return (\r\n            <div className={className}>\r\n                <LeftPane\r\n                    inbox={proxy.inbox!}\r\n                    selectedConversation={this.state.selectedConversation}\r\n                    onSelect={c => this.setState({ selectedConversation: c })} />\r\n                <RightPane conversation={this.state.selectedConversation}\r\n                    onBack={() => this.setState({ selectedConversation: undefined })} />\r\n            </div>\r\n        );\r\n    }\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport React, { Component } from 'react';\nimport { Login } from './Login'\nimport { Main } from './Main'\nimport { proxy } from './Proxy';\nexport default class App extends Component<{}, {signedIn: boolean}>\n{\n  state = {signedIn: false};\n  constructor(props) {\n    super(props);\n    proxy.addEventListener(\"login\", this.login);\n  }\n  render()\n  {\n    return (\n    <div className=\"App\">\n       {this.state.signedIn ? <Main/> : <Login />}\n    </div>\n    );\n  }\n  login = () => {\n    this.setState({signedIn: true});\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}